DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN
 0 : 11000000; IN A
 1 : 11000100; IN B
 2 : 10111000; MOV R, 0
 3 : 01010100; CMP B, 0
 4 : 01110000; JEQ END_LOOP
 5 : 00010000; endereço
 6 : 00001000; ADD R, A
 7 : 10101011; STORE R, 255
 8 : 11111111; endereço
 9 : 00010111; SUB B, 1
 A : 00000001; endereço
 B : 10110110; MOV B, R
 C : 10011011; LOAD R, 255
 D : 11111111; endereço
 E : 01100000; JMP LOOP_START
 F : 00000011; endereço
 10 : 11011000; OUT R
 11 : 11100000; WAIT
END;





## TESTE ULA ##

DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN
0 : 00000011; -- ADD A + imm
1 : 00000001; -- imm = 1
2 : 00000111; -- ADD B + imm
3 : 00000010; -- imm = 2
4 : 00001010; -- ADD R + R
5 : 00010011; -- SUB A - imm
6 : 00000001; -- imm = 1
7 : 00010111; -- SUB B - imm
8 : 00000010; -- imm = 2
9 : 00011010; -- SUB R - R
A : 00100011; -- AND A and imm
B : 00000001; -- imm = 1
C : 00100111; -- AND B and imm
D : 00000010; -- imm = 2
E : 00101010; -- AND R and R
F : 00000011; -- ADD A + imm
0 : 00000001; -- imm = 1
1 : 00101010; -- AND R and R
2 : 01000010; -- NOT R
3 : 01010001; -- CMP A cmp B
4 : 01010010; -- CMP A cmp R
5 : 00110001; -- OR A or B
6 : 00111010; -- OR R or R
7 : 01100000; -- JMP imm
8 : 00000111; -- imm = 7 

END;


## TESTE JEQ ##

DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN
0 : 00000011; -- ADD A + imm
1 : 00000001; -- imm = 1
2 : 00000111; -- ADD B + imm
3 : 00000010; -- imm = 2
4 : 00001010; -- ADD R + R
5 : 00010011; -- SUB A - imm
6 : 00000001; -- imm = 1
7 : 00010111; -- SUB B - imm
8 : 00000010; -- imm = 2
9 : 00011010; -- SUB R - R
A : 00100011; -- AND A and imm
B : 00000001; -- imm = 1
C : 00100111; -- AND B and imm
D : 00000010; -- imm = 2
E : 00101010; -- AND R and R
F : 00000011; -- ADD A + imm
10 : 00000001; -- imm = 1
11 : 00101010; -- AND R and R
12 : 01000010; -- NOT R
13 : 01010001; -- CMP A cmp B
14 : 01010010; -- CMP A cmp R
15 : 00110001; -- OR A or B
16 : 00111010; -- OR R or R
17 : 01110000; -- JEQ imm
18 : 00000111; -- imm = 7 
19 : 01010000; -- CMP A cmp A
1A : 01110000; -- JEQ imm
1B : 00000111; -- imm = 7 


END;


## TESTE JGR ##

DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN
0 : 01010001; -- CMP A cmp B
1 : 10000000; -- JGR imm
2 : 00001000; -- imm = 8
3 : 00000011; -- ADD A + imm
4 : 00000001; -- imm = 1
5 : 01011000; -- CMP R cmp A
6 : 10000000; -- JGR imm
7 : 00000000; -- imm = 0
8 : 00000001; -- ADD A + B

END;


## TESTE IN ##

DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN
0 : 11000000 ; -- IN in A
1 : 11000100 ; -- IN in B
2 : 11001000 ; -- IN in R

END;



## TESTE OUT ##


DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN
0 : 11000000 ; -- IN in A
1 : 11000100 ; -- IN in B
2 : 11001000 ; -- IN in R
3 : 11010000 ; -- OUT out A
4 : 11010100 ; -- OUT out B
5 : 11011000 ; -- OUT out R
6 : 11100000 ; -- WAIT 

END;




## TESTE STORE ##


DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN
0 : 11000100 ; -- IN in B
1 : 11001000 ; -- IN in R
2 : 10100111 ; -- STORE B store imm
3 : 00000100 ; -- STORE imm
5 : 11001000 ; -- IN in R
6 : 10101011 ; -- STORE R store imm
7 : 00001000 ; -- STORE imm
9 : 11000000 ; -- IN in A
A : 11000100 ; -- IN in B
B : 10100100 ; -- STORE A store B


END;



## TESTE MOV ##


DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN
0 : 11000100 ; -- IN in B
1 : 10110001 ; -- MOV B para A
2 : 10111000 ; -- MOV A para R
3 : 10111100 ; -- MOV A para imm
4 : 00000001 ; -- MOV imm
5 : 10111100 ; -- MOV A para R

END;





## TESTE LOAD ##


DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN
0 : 00000001 ; -- ADD A add B
1 : 10011011 ; -- LOAD R 
2 : 00000000 ; -- LOAD endereço
3 : 11000100 ; -- IN in B
4 : 10011001 ; -- LOAD B para R


END;
