library ieee;
use ieee.std_logic_1164.all;

entity uc is
    port(inst: in std_logic_vector(7 downto 0);
	      clk: in std_logic;
  control_bus: out std_logic_vector(33 downto 0));
end uc;

architecture behavior of uc is
    type state is (ini, pc, busca, dec, add_, add_1, add_imm_A, add_imm_B, add_imm_R, sub_, sub_1, sub_imm_A, sub_imm_B, sub_imm_R, and_, or_, not_ cmp_, jmp_, jeq_, jgr_, load_, store_, mov_, in_, out_, wait_);
    signal cur_state: state := idle;
    signal next_state: state;
    signal rst:std_logic;
	 signal load_pc: std_logic;
    signal mem_read: std_logic;
    signal mem_write: std_logic;
    signal mem_en: std_logic;
	 signal mem_src1: std_logic(2 downto 0);
	 signal mem_src2: std_logic(1 downto 0);
    signal load_ir: std_logic;
	 signal A_src: std_logic_vector(1 downto 0);
	 signal B_src: std_logic_vector(1 downto 0);
	 signal in_en: std_logic;
	 signal load_A: std_logic;
	 signal load_B: std_logic;
	 signal alu_src1: std_logic_vector(1 downto 0);
	 signal alu_src2: std_logic_vector(1 downto 0);
	 signal aluop: std_logic_vector(2 downto 0);
	 signal R_src: std_logic_vector(1 downto 0);
	 signal load_r: std_logic;
	 signal out_src: std_logic_vector(1 downto 0);
	 signal load_out: std_logic;
	 signal jmp: std_logic;
	 signal jeq: std_logic;
	 signal jgr: std_logic;
	 
begin
    process
    begin
        case(state) is
            when ini => -- Estado inicial: zera todos os regs
                rst <= '1';
                load_pc <= '0';
                mem_read <= '0';
                mem_write <= '0';
                mem_en <= '0';
                mem_src1 <= "000"
                mem_src2 <= "00"
                load_ir <= '0';
                A_src <= "00";
                B_src <= "00";
                in_en <= '0';
                load_A <= '0';
                load_B <= '0';
                alu_src1 <= "00";
                alu_src2 <= "00";
                aluop <= "000";
                R_src <= "00";
                load_r <= '0';
                out_src <= "00";
                load_out <= '0';
                jmp <= '0';
                jeq <= '0';
                jgr <= '0';
                next_state <= busca;

            when pc =>
                rst <= '0';
                load_pc <= '1';
                mem_read <= '0';
                mem_write <= '0';
                mem_en <= '0';
                mem_src1 <= "000"
                mem_src2 <= "00"
                load_ir <= '0';
                A_src <= "00";
                B_src <= "00";
                in_en <= '0';
                load_A <= '0';
                load_B <= '0';
                alu_src1 <= "00";
                alu_src2 <= "00";
                aluop <= "000";
                R_src <= "00";
                load_r <= '0';
                out_src <= "00";
                load_out <= '0';
                jmp <= '0';
                jeq <= '0';
                jgr <= '0';
                next_state <= busca;

            when busca => -- Estado de busca: lê a memória e grava no IR
                rst <= '0';
                load_pc <= '0';
                mem_read <= '1';
                mem_write <= '0';
                mem_en <= '1';
                mem_src1 <= "000"
                mem_src2 <= "00"
                load_ir <= '1';
                A_src <= "00";
                B_src <= "00";
                in_en <= '0';
                load_A <= '0';
                load_B <= '0';
                alu_src1 <= "00";
                alu_src2 <= "00";
                aluop <= "000";
                R_src <= "00";
                load_r <= '0';
                out_src <= "00";
                load_out <= '0';
                jmp <= '0';
                jeq <= '0';
                jgr <= '0'; 
                next_state <= dec;

            when dec => -- Recebe a instrução e decodifica
                case(inst(7 downto 4)) is
                    when "0000" =>
                        next_state <= add_;
                    when "0001" =>
                        next_state <= sub_;
                    when "0010" =>
                        next_state <= and_;
                    when "0011" =>
                        next_state <= or_;
                    when "0100" =>
                        next_state <= not_;
                    when "0101" =>
                        next_state <= cmp_;
                    when "0110" =>
                        next_state <= jmp_;
                    when "0111" =>
                        next_state <= jeq_;
                    when "1000" =>
                        next_state <= jgr_;
                    when "1001" =>
                        next_state <= load_;
                    when "1010" =>
                        next_state <= store_;
                    when "1011" =>
                        next_state <= mov_;
                    when "1100" =>
                        next_state <= in_;
                    when "1101" =>
                        next_state <= out_;
                    when "1110" =>
                        next_state <= wait_;
                    when (others) =>
                        next_state <= dec;
                end case;

            when add_ =>
					case(inst(1 downto 0)) is
						when "11" =>
							case(inst(3 downto 2)) is
								when "00" =>
									next_state <= add_imm_A;
								when "01" =>
									next_state <= add_imm_B;
								when "10" =>
									next_state <= add_imm_R;
								when others =>
									next_state <= dec;
							end case;
						when others =>
							next_state <= add_1;
					end case;
						
				when add_1 =>
					load_pc <= '0';
					mem_read <= '0';
					mem_write <= '0';
					mem_en <= '1';
					mem_src1 <= "000"
					mem_src2 <= "00"
					load_ir <= '0';
					A_src <= "00";
					B_src <= "00";
					in_en <= '0';
					load_A <= '0';
					load_B <= '0';
					alu_src1 <= inst(3 downto 2);
					alu_src2 <= inst(1 downto 0);
					aluop <= "000";
					R_src <= "00";
					load_r <= '1';
					out_src <= "00";
					load_out <= '0';
					jmp <= '0';
					jeq <= '0';
					jgr <= '0';
					next_state <= dec;
					
				when add_imm_A =>
					load_pc <= '1';
					mem_read <= '1';
					mem_write <= '0';
					mem_en <= '1';
					mem_src1 <= "000"
					mem_src2 <= "00"
					load_ir <= '0';
					A_src <= "00";
					B_src <= "00";
					in_en <= '0';
					load_A <= '0';
					load_B <= '0';
					alu_src1 <= "00";
					alu_src2 <= "11";
					aluop <= "000";
					R_src <= "00";
					load_r <= '1';
					out_src <= "00";
					load_out <= '0';
					jmp <= '0';
					jeq <= '0';
					jgr <= '0';
					next_state <= pc;
                
                when add_imm_B =>
                    load_pc <= '1';
                    mem_read <= '1';
                    mem_write <= '0';
                    mem_en <= '1';
                    mem_src1 <= "000"
                    mem_src2 <= "00"
                    load_ir <= '0';
                    A_src <= "00";
                    B_src <= "00";
                    in_en <= '0';
                    load_A <= '0';
                    load_B <= '0';
                    alu_src1 <= "01";
                    alu_src2 <= "11";
                    aluop <= "000";
                    R_src <= "00";
                    load_r <= '1';
                    out_src <= "00";
                    load_out <= '0';
                    jmp <= '0';
                    jeq <= '0';
                    jgr <= '0';
                    next_state <= pc;

                when add_imm_R =>
                    load_pc <= '1';
                    mem_read <= '1';
                    mem_write <= '0';
                    mem_en <= '1';
                    mem_src1 <= "000"
                    mem_src2 <= "00"
                    load_ir <= '0';
                    A_src <= "00";
                    B_src <= "00";
                    in_en <= '0';
                    load_A <= '0';
                    load_B <= '0';
                    alu_src1 <= "10";
                    alu_src2 <= "11";
                    aluop <= "000";
                    R_src <= "00";
                    load_r <= '1';
                    out_src <= "00";
                    load_out <= '0';
                    jmp <= '0';
                    jeq <= '0';
                    jgr <= '0';
                    next_state <= pc;

            when sub_ =>
					case(inst(1 downto 0)) is
						when "11" =>
							case(inst(3 downto 2)) is
								when "00" =>
									next_state <= sub_imm_A;
								when "01" =>
									next_state <= sub_imm_B;
								when "10" =>
									next_state <= sub_imm_R;
								when others =>
									next_state <= dec;
							end case;
						when others =>
							next_state <= sub_1;
					end case;
						
				when sub_1 =>
					load_pc <= '0';
					mem_read <= '0';
					mem_write <= '0';
					mem_en <= '1';
					mem_src1 <= "000"
					mem_src2 <= "00"
					load_ir <= '0';
					A_src <= "00";
					B_src <= "00";
					in_en <= '0';
					load_A <= '0';
					load_B <= '0';
					alu_src1 <= inst(3 downto 2);
					alu_src2 <= inst(1 downto 0);
					aluop <= inst(6 downto 4);
					R_src <= "00";
					load_r <= '1';
					out_src <= "00";
					load_out <= '0';
					jmp <= '0';
					jeq <= '0';
					jgr <= '0';
					next_state <= dec;
					
				when sub_imm_A =>
					load_pc <= '1';
					mem_read <= '1';
					mem_write <= '0';
					mem_en <= '1';
					mem_src1 <= "000"
					mem_src2 <= "00"
					load_ir <= '0';
					A_src <= "00";
					B_src <= "00";
					in_en <= '0';
					load_A <= '0';
					load_B <= '0';
					alu_src1 <= "00";
					alu_src2 <= "11";
					aluop <= inst(6 downto 4);
					R_src <= "00";
					load_r <= '1';
					out_src <= "00";
					load_out <= '0';
					jmp <= '0';
					jeq <= '0';
					jgr <= '0';
					next_state <= pc;
                
                when sub_imm_B =>
                    load_pc <= '1';
                    mem_read <= '1';
                    mem_write <= '0';
                    mem_en <= '1';
                    mem_src1 <= "000"
                    mem_src2 <= "00"
                    load_ir <= '0';
                    A_src <= "00";
                    B_src <= "00";
                    in_en <= '0';
                    load_A <= '0';
                    load_B <= '0';
                    alu_src1 <= "01";
                    alu_src2 <= "11";
                    aluop <= inst(6 downto 0);
                    R_src <= "00";
                    load_r <= '1';
                    out_src <= "00";
                    load_out <= '0';
                    jmp <= '0';
                    jeq <= '0';
                    jgr <= '0';
                    next_state <= pc;

                when sub_imm_R =>
                    load_pc <= '1';
                    mem_read <= '1';
                    mem_write <= '0';
                    mem_en <= '1';
                    mem_src1 <= "000"
                    mem_src2 <= "00"
                    load_ir <= '0';
                    A_src <= "00";
                    B_src <= "00";
                    in_en <= '0';
                    load_A <= '0';
                    load_B <= '0';
                    alu_src1 <= "10";
                    alu_src2 <= "11";
                    aluop <= inst(6 downto 4);
                    R_src <= "00";
                    load_r <= '1';
                    out_src <= "00";
                    load_out <= '0';
                    jmp <= '0';
                    jeq <= '0';
                    jgr <= '0';
                    next_state <= pc;
		end case;
	 else
		next_state <= dec;
    end if;
    end process;
	 
	 control_bus <= rst & load_pc & mem_read & mem_write & mem_en & mem_src1 & mem_src2 & 
						 load_ir & A_src & B_src & in_en & load_A & load_B & alu_src1 & alu_src2 & 
						 aluop & R_src & load_R & out_src & load_out & jmp & jeq & jgr;
end behavior;
